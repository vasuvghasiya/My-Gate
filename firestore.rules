rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to get user's roles from custom claims
    function getUserRoles() {
      return request.auth.token.roles != null ? request.auth.token.roles : [];
    }
    
    // Helper function to check if user has specific role
    function hasRole(role) {
      return role in getUserRoles();
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return hasRole('admin');
    }
    
    // Helper function to check if user is guard
    function isGuard() {
      return hasRole('guard');
    }
    
    // Helper function to check if user is resident
    function isResident() {
      return hasRole('resident');
    }
    
    // Helper function to get user's household ID
    function getUserHouseholdId() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.householdId;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (isAdmin() || userId == request.auth.uid);
      allow create: if isAuthenticated() && userId == request.auth.uid;
      allow update: if isAuthenticated() && (isAdmin() || userId == request.auth.uid);
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // Households collection
    match /households/{householdId} {
      allow read: if isAuthenticated() && (isAdmin() || resource.data.members[request.auth.uid] != null);
      allow create: if isAuthenticated() && isAdmin();
      allow update: if isAuthenticated() && isAdmin();
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // Visitors collection
    match /visitors/{visitorId} {
      allow read: if isAuthenticated() && (
        isAdmin() || 
        isGuard() || 
        resource.data.hostHouseholdId == getUserHouseholdId()
      );
      
      allow create: if isAuthenticated() && (
        isAdmin() || 
        (isResident() && request.resource.data.hostHouseholdId == getUserHouseholdId())
      );
      
      allow update: if isAuthenticated() && (
        isAdmin() ||
        (isResident() && resource.data.hostHouseholdId == getUserHouseholdId() && 
         request.resource.data.status in ['approved', 'denied']) ||
        (isGuard() && resource.data.status == 'approved' && 
         request.resource.data.status in ['checked_in', 'checked_out'])
      );
      
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // Audit events collection (append-only)
    match /audit_events/{eventId} {
      allow read: if isAuthenticated() && (
        isAdmin() || 
        isGuard() ||
        (isResident() && resource.data.householdId == getUserHouseholdId())
      );
      allow create: if isAuthenticated(); // Server-side only
      allow update: if false; // Immutable
      allow delete: if false; // Immutable
    }
    
    // Chat history collection
    match /chat_history/{messageId} {
      allow read: if isAuthenticated() && (
        isAdmin() || 
        resource.data.userId == request.auth.uid
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if false; // Immutable
      allow delete: if isAuthenticated() && (
        isAdmin() || 
        resource.data.userId == request.auth.uid
      );
    }
    
    // Notification tokens collection (for FCM)
    match /notification_tokens/{tokenId} {
      allow read: if isAuthenticated() && (
        isAdmin() || 
        resource.data.userId == request.auth.uid
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && (
        isAdmin() || 
        resource.data.userId == request.auth.uid
      );
      allow delete: if isAuthenticated() && (
        isAdmin() || 
        resource.data.userId == request.auth.uid
      );
    }
    
    // Amenities collection (plus feature)
    match /amenities/{amenityId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isAdmin();
      allow update: if isAuthenticated() && isAdmin();
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // Amenity bookings collection (plus feature)
    match /amenity_bookings/{bookingId} {
      allow read: if isAuthenticated() && (
        isAdmin() || 
        resource.data.userId == request.auth.uid
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && (
        isAdmin() || 
        resource.data.userId == request.auth.uid
      );
      allow delete: if isAuthenticated() && (
        isAdmin() || 
        resource.data.userId == request.auth.uid
      );
    }
    
    // Incidents collection (plus feature)
    match /incidents/{incidentId} {
      allow read: if isAuthenticated() && (
        isAdmin() || 
        isGuard() || 
        resource.data.reportedBy == request.auth.uid
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        isAdmin() || 
        isGuard() || 
        resource.data.reportedBy == request.auth.uid
      );
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // Broadcast messages collection (plus feature)
    match /broadcasts/{broadcastId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isAdmin();
      allow update: if isAuthenticated() && isAdmin();
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated(); // Server-side only
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if false; // Notifications are not deleted
    }
  }
}
